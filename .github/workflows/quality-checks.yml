name: Code Quality Checks

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**.py'
      - '**.js'
      - '**.jsx'
      - '**.ts'
      - '**.tsx'
      - '.github/workflows/quality-checks.yml'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  python-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy pylint
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Check code formatting with Black
      run: |
        black --check --diff app/ tests/
      continue-on-error: true
    
    - name: Check imports with isort
      run: |
        isort --check --diff app/ tests/
      continue-on-error: true
    
    - name: Lint with flake8
      run: |
        flake8 app/ tests/
      continue-on-error: true
    
    - name: Type checking with mypy
      run: |
        mypy app/
      continue-on-error: true
    
    - name: Static code analysis with pylint
      run: |
        pylint app/ --disable=all --enable=E,F,W
      continue-on-error: true

  js-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        npm install -g eslint prettier
    
    - name: Check code formatting with Prettier
      run: |
        cd frontend
        npx prettier --check "src/**/*.{js,jsx,ts,tsx,css,scss}"
      continue-on-error: true
    
    - name: Lint with ESLint
      run: |
        cd frontend
        npx eslint --ext .js,.jsx,.ts,.tsx src/
      continue-on-error: true
    
    - name: Run TypeScript compiler checks
      run: |
        cd frontend
        npx tsc --noEmit
      continue-on-error: true

  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          # Additional arguments for the sonarcloud scanner
          args: >
            -Dsonar.projectKey=${{ github.repository_owner }}_smart-rent
            -Dsonar.organization=${{ github.repository_owner }}-github
        continue-on-error: true  # Don't fail workflow if token not configured 