name: CI Pipeline

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]

jobs:
  lint-and-test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install
    
    - name: Setup Jest and ESLint
      run: |
        cd frontend
        npm install --save-dev jest@26.6.3 @types/jest jest-environment-jsdom eslint
    
    - name: Check frontend build directory exists
      run: |
        mkdir -p frontend/build
    
    - name: Lint frontend (with continue-on-error)
      run: |
        cd frontend
        npx eslint src/ --ext .js,.jsx,.ts,.tsx || true
    
    - name: Test frontend (with continue-on-error)
      run: |
        cd frontend
        npm test || true
    
    - name: Build frontend (with continue-on-error)
      run: |
        cd frontend
        npm run build || true
    
    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/build/
        if-no-files-found: warn
      continue-on-error: true

  lint-and-test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
    
    - name: Install backend dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Lint backend
      run: |
        cd backend
        pip install flake8
        flake8 app tests --extend-ignore=E501,F401 || true
    
    - name: Run backend tests
      env:
        DATABASE_URI: postgresql://postgres:postgres@localhost:5432/test_db
        SECRET_KEY: test_secret_key
      run: |
        cd backend
        pytest --cov=app tests/ || true

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run npm audit
      run: |
        cd frontend
        npm audit --production || true
    
    - name: Run Python safety check
      run: |
        cd backend
        pip install safety
        safety check -r requirements.txt || true
    
    - name: Check if contracts directory exists
      id: check_contracts
      run: |
        if [ -d "contracts" ] && [ "$(ls -A contracts)" ]; then
          echo "::set-output name=exists::true"
        else
          echo "::set-output name=exists::false"
        fi
    
    - name: Run Solidity security scan
      if: steps.check_contracts.outputs.exists == 'true'
      uses: crytic/slither-action@v0.1.1
      with:
        target: contracts/
        slither-args: '--exclude-dependencies --filter-paths "node_modules" --exclude naming-convention,external-function'
      continue-on-error: true

  dockerize:
    needs: [lint-and-test-frontend, lint-and-test-backend, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Create frontend build directory if it doesn't exist
      run: mkdir -p frontend/build
    
    - name: Download frontend build artifacts
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: frontend/build
      continue-on-error: true
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=sha,format=short
    
    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v3
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta.outputs.tags }}-frontend
        labels: ${{ steps.meta.outputs.labels }}
    
    - name: Build and push backend Docker image
      uses: docker/build-push-action@v3
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta.outputs.tags }}-backend
        labels: ${{ steps.meta.outputs.labels }} 